/// <reference types="@adonisjs/lucid" />
/// <reference types="@adonisjs/application/build/adonis-typings" />
declare module '@ioc:Adonis/Addons/LucidSlugify' {
    import { LucidModel, LucidRow } from '@ioc:Adonis/Lucid/Orm';
    import { ApplicationContract } from '@ioc:Adonis/Core/Application';
    /**
     * Config accepted by the strategies and the slugify
     * decorator
     */
    type SlugifyConfig = {
        strategy: keyof StrategiesList | SlugifyStrategyContract;
        fields: string[];
        maxLength?: number;
        completeWords?: boolean;
        allowUpdates?: boolean | ((model: LucidRow) => boolean);
        separator?: string;
        transformer?: (value: any) => string;
    } & Record<string, any>;
    /**
     * The interface every strategy must adhere to
     */
    interface SlugifyStrategyContract {
        /**
         * Make slug for a given field and value
         */
        makeSlug(model: LucidModel, field: string, value: string): string;
        /**
         * Make the slug created by the "makeSlug" method unique.
         */
        makeSlugUnique(model: LucidModel, field: string, value: string): Promise<string> | string;
    }
    /**
     * We do not define these in the user land code. Because renaming the
     * key inside the following interface doesn't translate that change
     * to runtime.
     *
     * In other words the strategies names are fixed and we use this interface
     * to allow other packages to add custom strategies
     */
    interface StrategiesList {
        simple: SlugifyStrategyContract;
        dbIncrement: SlugifyStrategyContract;
        shortId: SlugifyStrategyContract;
    }
    /**
     * Shape of the extend callback
     */
    type ExtendCallback = (manager: SlugifyManagerContract, config: SlugifyConfig) => SlugifyStrategyContract;
    /**
     * Manager to work
     */
    interface SlugifyManagerContract {
        application: ApplicationContract;
        /**
         * Pull instance of a given strategy
         */
        use(strategy: keyof StrategiesList, config: SlugifyConfig): SlugifyStrategyContract;
        /**
         * Extend by adding a custom strategy
         */
        extend(strategy: keyof StrategiesList, callback: ExtendCallback): void;
    }
    /**
     * Slugify decorator
     */
    type SlugifyDecorator = (options?: SlugifyConfig) => (target: any, property: any) => void;
    const slugify: SlugifyDecorator;
    const Slugify: SlugifyManagerContract;
}
