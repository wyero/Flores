"use strict";
/*
 * @adonisjs/lucid-slugify
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slugifier = void 0;
/**
 * Makes the slug for a given model and field
 */
class Slugifier {
    constructor(strategy, model, field, config) {
        this.strategy = strategy;
        this.model = model;
        this.field = field;
        this.config = config;
        this.separator = this.config.separator || '-';
    }
    /**
     * Transform a given value to a string
     */
    transformValueToSlugString(value) {
        /**
         * Use the transformer if configured
         */
        if (typeof this.config.transformer === 'function') {
            return this.config.transformer(value);
        }
        if (value === true) {
            return '1';
        }
        if (value === false) {
            return '0';
        }
        return String(value);
    }
    /**
     * Returns the slug value from the configured fields
     */
    getSlugValue(row) {
        const slugValues = [];
        let hasNullValues = false;
        for (let field of this.config.fields) {
            const value = row[field];
            if (value === null || value === undefined) {
                hasNullValues = true;
                break;
            }
            else {
                slugValues.push(this.transformValueToSlugString(value));
            }
        }
        return hasNullValues ? null : slugValues.join(this.separator);
    }
    /**
     * Makes a slug for a given instance of model
     */
    async makeSlug(row) {
        const slugValue = this.getSlugValue(row);
        if (!slugValue) {
            return null;
        }
        return this.strategy.makeSlugUnique(this.model, this.field, this.strategy.makeSlug(this.model, this.field, slugValue));
    }
}
exports.Slugifier = Slugifier;
