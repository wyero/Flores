"use strict";
/*
 * @adonisjs/lucid-slugify
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlugifyManager = void 0;
/// <reference path="../../adonis-typings/index.ts" />
const utils_1 = require("@poppinss/utils");
/**
 * Slugify manager manages the lifecycle of strategies
 */
class SlugifyManager {
    constructor(application) {
        this.application = application;
        /**
         * A private map of strategies added from outside in.
         */
        this.extendedStrategies = new Map();
    }
    /**
     * Makes an instance of the simple strategy
     */
    makeSimpleStrategy(config) {
        const { SimpleStrategy } = require('../Strategies/Simple');
        return new SimpleStrategy(config);
    }
    /**
     * Makes an instance of the dbIncrement strategy
     */
    makeDbIncrementStrategy(config) {
        const { DbIncrementStrategy } = require('../Strategies/DbIncrement');
        return new DbIncrementStrategy(this.application.container.resolveBinding('Adonis/Lucid/Database'), config);
    }
    /**
     * Makes an instance of the shortid strategy
     */
    makeShortIdStrategy(config) {
        const { ShortIdStrategy } = require('../Strategies/ShortId');
        return new ShortIdStrategy(config);
    }
    /**
     * Make extended strategy instance
     */
    makeExtendedStrategy(strategy, config) {
        if (!this.extendedStrategies.has(strategy)) {
            throw new utils_1.Exception(`"${strategy}" is not a valid slugify strategy`, 500, 'E_INVALID_SLUGIFY_STRATEGY');
        }
        return this.extendedStrategies.get(strategy)(this, config);
    }
    /**
     * Makes an instance of the given strategy
     */
    use(strategy, config) {
        switch (strategy) {
            case 'simple':
                return this.makeSimpleStrategy(config);
            case 'dbIncrement':
                return this.makeDbIncrementStrategy(config);
            case 'shortId':
                return this.makeShortIdStrategy(config);
            default:
                return this.makeExtendedStrategy(strategy, config);
        }
    }
    /**
     * Extend by adding custom strategies
     */
    extend(strategy, callback) {
        this.extendedStrategies.set(strategy, callback);
    }
}
exports.SlugifyManager = SlugifyManager;
